---
description: 项目架构规范
globs: true
alwaysApply: true
---
# 开发规范
## 1. DDD架构规范

### 1.1 目录结构

遵循以下目录结构组织代码：

```
backend/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/JP/dronesim/
│   │   │       ├── application/
│   │   │       │   ├── services/           // 应用服务
│   │   │       │   │   ├── AirspaceManagementAppService.java  // 负责场景的创建、加载、保存、查询等用例协调
│   │   │       │   │   ├── DeviceManagementAppService.java    // 探测设备的部署、删除、修改等
│   │   │       │   │   ├── UAVManagementAppService.java       // 无人机的部署、删除、修改、飞行路径设置等
│   │   │       │   │   ├── SimulationAppService.java        // 仿真的启动、暂停、恢复、停止、时间推进等
│   │   │       │   │   └── QueryAppService.java             // 提供查询所有实体状态、特定设备详情、探测日志等
│   │   │       │   └── dtos/
│   │   │       │       ├── request/        // 请求DTO
│   │   │       │       │   ├── AirspaceConfigDTO.java         // 用于初始化空域配置
│   │   │       │       │   ├── EnvironmentUpdateParamsDTO.java  // 动态更新环境参数
│   │   │       │       │   ├── DeviceInitParamsDTO.java       // 初始化探测设备
│   │   │       │       │   ├── UAVStateDTO.java               // 初始化无人机状态
│   │   │       │       │   ├── SimulationControlCommandDTO.java // 仿真控制指令 (start/pause/stop)
│   │   │       │       │   └── AdjustDeviceParamDTO.java      // 设备参数热调整
│   │   │       │       ├── response/       // 响应DTO
│   │   │       │       │   ├── AirspaceDetailsDTO.java        // 空域详情（包含实体列表）
│   │   │       │       │   ├── EntityStateDTO.java            // 实体（设备/无人机）的当前状态，用于实时推送和查询
│   │   │       │       │   ├── DeviceDetailsDTO.java          // 探测设备详细信息
│   │   │       │       │   ├── DetectionLogEntryDTO.java      // 探测日志条目
│   │   │       │       │   └── SimulationStatusDTO.java       // 仿真整体状态
│   │   │       │       └── event/          // 事件DTO
│   │   │       │           ├── UAVPositionUpdateEventDTO.java // 无人机位置更新事件
│   │   │       │           ├── DeviceStatusUpdateEventDTO.java// 设备状态更新事件
│   │   │       │           ├── DetectionEventDTO.java         // 探测事件
│   │   │       │           ├── EntityAddedEventDTO.java       // 新实体添加事件
│   │   │       │           └── EntityRemovedEventDTO.java     // 实体移除事件
│   │   │       ├── domain/
│   │   │       │   ├── airspace/
│   │   │       │   │   ├── model/          // 聚合根
│   │   │       │   │   │   ├── Airspace.java                 // 空域领域模型，管理三维模拟空间、环境参数和所有实体
│   │   │       │   │   │   │               // 值对象
│   │   │       │   │   │   ├── EnvironmentParameters.java    // 封装天气、温度、风向量等环境属性
│   │   │       │   │   │   └── TimeStep.java                 // 仿真时间步长
│   │   │       │   │   └── repository/     // 仓储接口
│   │   │       │   │       └── IAirspaceRepository.java      // 定义空域聚合的持久化(保存、加载)
│   │   │       │   ├── device/
│   │   │       │   │   ├── model/
│   │   │       │   │   │   ├── ProbeDevice.java              // 聚合根：所有探测设备基类接口或抽象类
│   │   │       │   │   │   ├── common/
│   │   │       │   │   │   │   ├── SensorParameters.java   // 接口/抽象类：传感器参数通用接口
│   │   │       │   │   │   │   └── DetectionLog.java         // 实体：探测日志列表，包含DetectionEvent
│   │   │       │   │   │   ├── opticalcamera/
│   │   │       │   │   │   │   ├── OpticalCamera.java      // 实体：光电摄像头领域模型
│   │   │       │   │   │   │   └── OpticalParameters.java  // 值对象：光电摄像头特有参数 (分辨率、焦距、灵敏度等)
│   │   │       │   │   │   ├── radar/
│   │   │       │   │   │   │   ├── ElectromagneticRadar.java // 实体：电磁波雷达领域模型
│   │   │       │   │   │   │   └── RadarParameters.java    // 值对象：雷达特有参数 (频率、功率、增益、信噪比等)
│   │   │       │   │   │   ├── radiodetector/
│   │   │       │   │   │   │   ├── RadioDetector.java      // 实体：无线电侦测器领域模型
│   │   │       │   │   │   │   └── RadioParameters.java    // 值对象：无线电侦测特有参数 (频率范围、方向探测精度等)
│   │   │       │   │   │   ├── gps/
│   │   │       │   │   │   │   ├── GPSJammer.java          // 实体：GPS诱导器领域模型
│   │   │       │   │   │   │   └── JammerParameters.java   // 值对象：诱导器特有参数 (诱导频率、功率、信号类型等)
│   │   │       │   │   │   └── events/         // 值对象
│   │   │       │   │   │       └── DetectionEvent.java     // 探测事件信息(时间戳、探测器、被探测UAV、置信度)
│   │   │       │   │   └── repository/         // 仓储接口
│   │   │       │   │       └── IProbeDeviceRepository.java   // 定义探测设备聚合的持久化契约
│   │   │       │   ├── uav/
│   │   │       │   │   ├── model/
│   │   │       │   │   │   ├── UAV.java                      // 聚合根：无人机领域模型
│   │   │       │   │   │   ├── Waypoint.java                 // 实体：飞行路径上的航点
│   │   │       │   │   │   └── PhysicalProperties.java       // 值对象：封装无人机物理特性 (无线电信号发射功率)
│   │   │       │   │   └── repository/
│   │   │       │   │       └── IUAVRepository.java           // 仓储接口：定义无人机聚合的持久化契约
│   │   │       │   ├── common/
│   │   │       │   │   ├── valueobjects/           // 值对象
│   │   │       │   │   │   ├── Position.java                 // 3D位置 (x, y, z)
│   │   │       │   │   │   ├── Orientation.java              // 3D姿态 (四元数或欧拉角)
│   │   │       │   │   │   ├── Velocity.java                 // 3D速度 (vx, vy, vz)
│   │   │       │   │   │   └── Acceleration.java             // 3D加速度 (ax, ay, az)
│   │   │       │   │   └── enums/          // 枚举
│   │   │       │   │       ├── DeviceType.java             // 设备类型枚举
│   │   │       │   │       ├── UAVStatus.java              // 无人机运行状态 ("悬停", "运动", "侦测")
│   │   │       │   │       └── DeviceStatus.java           // 设备运行状态 ("active", "inactive", "error")
│   │   │       │   └── services/           // 领域服务
│   │   │       │       ├── DetectionService.java         // 执行探测判定逻辑 (雷达方程、光电识别、无线电信号传播等)
│   │   │       │       └── SimulationEngineService.java  // 推进仿真时间，协调Airspace、UAV移动和ProbeDevice探测
│   │   │       ├── infrastructure/             // 基础设施层
│   │   │       │   ├── persistence/
│   │   │       │   │   ├── repositoryimpl/         // 仓储实现
│   │   │       │   │   │   ├── AirspaceRepositoryImpl.java   // IAirspaceRepository的PostgreSQL实现
│   │   │       │   │   │   ├── ProbeDeviceRepositoryImpl.java // IProbeDeviceRepository的PostgreSQL实现
│   │   │       │   │   │   └── UAVRepositoryImpl.java        // IUAVRepository的PostgreSQL实现
│   │   │       │   │   └── ORM/
│   │   │       │   │       ├── AirspaceJpaModel.java        // `airspaces`表的持久化模型
│   │   │       │   │       ├── EntityJpaModel.java          // `entities`表的持久化模型 (通用实体表)
│   │   │       │   │       └── DetectionEventJpaModel.java  // `detection_events`表的持久化模型
│   │   │       │   ├── external/
│   │   │       │   │   ├── airsim/
│   │   │       │   │   │   ├── AirSimApiClient.java          // 外部服务客户端：封装与AirSim仿真器API的通信逻辑
│   │   │       │   │   │   └── dto/
│   │   │       │   │   │       └── AirSimDetectionResponseDTO.java // AirSim API响应数据模型
│   │   │       │   ├── realtime/
│   │   │       │   │   ├── websocket/          // 实时通信服务
│   │   │       │   │   │   ├── WebSocketService.java         // 实现WebSocket服务器，后端向前端推送实时仿真数据
│   │   │       │   │   │   └── WebSocketSessionManager.java  // WebSocket会话管理
│   │   │       │   ├── config/         // 配置类
│   │   │       │   │   ├── DatabaseConfig.java             // 数据库连接配置
│   │   │       │   │   ├── WebSocketConfig.java            // WebSocket服务器配置
│   │   │       │   │   └── AirSimConfig.java               // AirSim API客户端配置
│   │   │       │   └── util/
│   │   │       │       └── SpatialConverter.java           // 工具类：负责地理空间数据与领域模型之间的转换
│   │   │       └── interface/          // 接口层
│   │   │           ├── rest/
│   │   │           │   ├── controller/         // REST控制器
│   │   │           │   │   ├── SimulationController.java     // 处理仿真控制（启动/暂停/停止）相关的HTTP请求
│   │   │           │   │   ├── AirspaceController.java       // 处理场景管理（创建/加载/保存）相关的HTTP请求
│   │   │           │   │   ├── DeviceController.java         // 处理设备部署/删除/修改相关的HTTP请求
│   │   │           │   │   ├── UavController.java            // 处理无人机部署/删除/修改相关的HTTP请求
│   │   │           │   │   └── QueryController.java          // 处理数据查询相关的HTTP请求
│   │   │           │   └── exception/
│   │   │           │       └── GlobalExceptionHandler.java   // 全局异常处理器
│   │   │           └── websocket/              // WebSocket处理器
│   │   │               └── SimulationWebSocketHandler.java // 处理前端发送的实时指令 (参数热调整、仿真控制)
│   │   └── resources/
│   │       └── application.yml // 应用程序配置
│   └── test/
│       └── java/com/yourcompany/dronesim/
│           └── ... (相应的测试文件)
└── pom.xml // 项目构建文件
```

### 1.2 分层职责

- **领域层**: 核心业务逻辑，领域模型及相关行为
- **应用层**: 业务流程编排，用例实现
- **接口层**: 外部接口，处理请求和响应
- **基础设施层**: 技术细节实现，提供技术支持

### 1.3 领域模型规范

- 聚合根: 负责保证聚合内所有实体和值对象的一致性
- 实体: 具有唯一标识的对象
- 值对象: 没有唯一标识，通过属性值确定的对象
- 领域服务: 不自然归属于任何实体的业务逻辑

## 2. 命名规范

### 2.1 类命名

- 控制器: `{领域名}Controller`
  - 例: `ConversationController`
- 应用服务: `{领域名}Service`
  - 例: `ConversationService`
- 领域服务: `{领域名}DomainService`
  - 例: `ConversationDomainService`
- 领域模型: 使用具体业务名称
  - 例: `Message`, `Session`
- 仓储接口: `{模型名}Repository`
  - 例: `MessageRepository`
- 仓储实现: `{模型名}RepositoryImpl`
  - 例: `MessageRepositoryImpl`
- DTO: `{模型名}DTO`
  - 例: `MessageDTO`
- 请求/响应对象: `{模型名}Request`, `{模型名}Response`
  - 例: `MessageRequest`, `MessageResponse`
- 持久化对象: `{模型名}PO`
  - 例: `MessagePO`
- Mapper: `{模型名}Mapper`
  - 例: `MessageMapper`

### 2.2 方法命名

- 查询方法: `findXXX`, `getXXX`, `queryXXX`
- 保存方法: `save`, `create`, `insert`
- 更新方法: `update`
- 删除方法: `delete`, `remove`
- 列表查询: `listXXX`, `findAllXXX`
- 统计查询: `countXXX`
- 批量操作: `batchXXX`

### 2.3 变量命名

- 使用驼峰命名法
- 布尔类型变量使用 `isXXX`, `hasXXX`, `canXXX` 形式
- 集合类型变量使用复数形式

### 2.4 常量命名

- 全部大写，单词间用下划线分隔
- 例: `MAX_RETRY_COUNT`, `DEFAULT_TIMEOUT`

## 3. API规范

### 3.1 路由设计

- REST风格API
- 资源路径: `/api/{业务领域}/{资源}`
- 例: `/api/conversation/messages`

### 3.2 HTTP方法

- GET: 查询资源
- POST: 创建资源
- PUT: 全量更新资源
- PATCH: 部分更新资源
- DELETE: 删除资源

### 3.3 状态码使用

- 200: 成功
- 400: 请求参数错误
- 401: 未认证
- 403: 权限不足
- 404: 资源不存在
- 500: 服务器内部错误

### 3.4 响应格式

统一返回格式:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {}
}
```

## 4. 数据库规范

不允许创建外键索引

### 4.1 表命名

- 使用小写字母，单词间用下划线分隔
- 使用复数形式
- 例: `messages`, `user_profiles`

### 4.2 字段命名

- 使用小写字母，单词间用下划线分隔
- 主键统一使用 `id`
- 创建时间: `created_at`
- 更新时间: `updated_at`
- 逻辑删除: `is_deleted`

### 4.3 索引命名

- 主键索引: `pk_{表名}`
- 唯一索引: `uk_{表名}_{字段名}`
- 普通索引: `idx_{表名}_{字段名}`

## 5. 代码质量规范

### 5.1 异常处理

- 使用自定义异常体系
- 在适当的层次处理异常
- 不要吞噬异常
- 记录关键异常信息

### 5.2 日志规范

- 按级别使用日志
  - ERROR: 系统错误
  - WARN: 警告信息
  - INFO: 关键业务信息
  - DEBUG: 开发调试信息
- 包含上下文信息
- 避免敏感信息泄露

### 5.3 注释规范

- 类注释: 说明类的用途和职责
- 方法注释: 说明方法功能、参数和返回值
- 复杂逻辑需要添加行内注释

### 5.4 单元测试

- 使用 springboot test 进行测试
- 测试方法命名: `test{被测方法}_{测试场景}`
- 遵循AAA原则: Arrange-Act-Assert

## 6. 工具库使用规范

### 6.1 MyBatis-Plus

- 禁止使用通用Mapper直接操作数据库
- 复杂查询使用XML配置
- 自定义SQL必须经过安全检查
- 使用 mybatisplus 相关函数操作sql

### 6.2 工具类

- 优先使用项目工具类
- 其次使用Hutool等第三方工具库
- 避免重复造轮子

### 6.3 线程安全

- 避免修改共享状态
- 谨慎使用静态变量
- 使用线程安全集合

## 7. 安全规范

### 7.1 输入验证

- 所有外部输入必须验证
- 使用validation注解进行参数校验
- 防止SQL注入、XSS等攻击

### 7.2 敏感信息

- 敏感信息不得明文存储
- 日志中不得包含敏感信息
- API响应中不返回敏感信息

## 8. 性能规范

### 8.1 数据库优化

- 合理使用索引
- 避免N+1查询问题
- 大数据量分页查询

### 8.2 缓存使用

- 合理使用缓存提高性能
- 注意缓存一致性问题
- 设置适当的过期策略

### 8.3 资源释放

- 及时释放数据库连接
- 关闭IO流
- 适当使用try-with-resources

## 9. ddd校验规范
接口层（api）：校验请求数据格式校验
应用层（application）：业务流程校验
领域层（domain）：核心业务规则校验
